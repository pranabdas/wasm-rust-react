{"version":3,"file":"static/js/449.504e4ef8.chunk.js","mappings":"gMACIA,E,kBAMG,SAASC,EAAIC,GAEhB,OADYF,EAAKC,IAAIC,EAEzB,CAAC,SAEcC,EAAK,EAAD,+CA6BlB,OA7BkB,0BAAnB,WAAoBC,EAAQC,GAAO,mFACP,oBAAbC,UAA2BF,aAAkBE,UAAQ,oBACZ,oBAArCC,YAAYC,qBAAmC,0CAErCD,YAAYC,qBAAqBJ,EAAQC,GAAQ,OAalB,yCAbkB,mCAGpB,oBAAtCD,EAAOK,QAAQC,IAAI,gBAAqC,iBACxDC,QAAQC,KAAK,oMAAqM,EAAF,IAAK,4DAQ7MR,EAAOS,cAAa,QAA7B,OAALC,EAAQ,EAAH,eACEP,YAAYQ,YAAYD,EAAOT,GAAQ,yBAG7BE,YAAYQ,YAAYX,EAAQC,GAAQ,QAAjD,MAARW,EAAW,EAAH,gBAEUT,YAAYU,UAAQ,0CACjC,CAAED,SAAAA,EAAUZ,OAAAA,IAAQ,iCAGpBY,GAAQ,0DAG1B,sBAED,SAASE,IACL,IAAMb,EAAU,CAChBA,IAAc,CAAC,GAEf,OAAOA,CACX,CAMA,SAASc,EAAaH,EAAUZ,GAK5B,OAJAJ,EAAOgB,EAASI,QAChBC,EAAKC,uBAAyBlB,EAGvBJ,CACX,CAcC,SAEcqB,EAAK,GAAD,4CAelB,OAfkB,0BAAnB,WAAoBE,GAAK,kFAYkB,MAXlB,qBAAVA,IACPA,EAAQ,IAAIC,IAAI,aAEdnB,EAAUa,KAEK,kBAAVK,GAA0C,oBAAZE,SAA0BF,aAAiBE,SAA4B,oBAARD,KAAsBD,aAAiBC,OAC3ID,EAAQG,MAAMH,IAGE,KAEepB,EAAI,SAAOoB,EAAK,OAAS,OAAT,iBAAElB,EAAO,sCAApC,OAAoC,SAApDW,EAAQ,EAARA,SAAUZ,EAAM,EAANA,OAAM,kBAEjBe,EAAaH,EAAUZ,IAAO,6CACxC,sBAGD,QC5FauB,EAAQ,SAARA,EAASzB,GAAG,OAAKA,GAAO,EAAI,EAAIyB,EAAMzB,EAAM,GAAKyB,EAAMzB,EAAM,EAAG,EAEhE0B,EAAK,yCAAG,WAAO1B,GAAG,sFACrBmB,IAAO,KAAD,2BACLpB,EAAIC,IAAI,2CAClB,gBAHiB,qC","sources":["../rust-libs/pkg/rust_libs.js","worker.js"],"sourcesContent":["\nlet wasm;\n\n/**\n* @param {number} num\n* @returns {number}\n*/\nexport function fib(num) {\n    const ret = wasm.fib(num);\n    return ret;\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL('rust_libs_bg.wasm', import.meta.url);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\nexport { initSync }\nexport default init;\n","import init, { fib } from \"rust-libs\";\n\nexport const fibjs = (num) => num <= 2 ? 1 : fibjs(num - 1) + fibjs(num - 2);\n\nexport const fibrs = async (num) => {\n    await init();\n    return fib(num);\n}\n\n"],"names":["wasm","fib","num","load","module","imports","Response","WebAssembly","instantiateStreaming","headers","get","console","warn","arrayBuffer","bytes","instantiate","instance","Instance","getImports","finalizeInit","exports","init","__wbindgen_wasm_module","input","URL","Request","fetch","fibjs","fibrs"],"sourceRoot":""}